plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.9.0'
    id 'maven-publish'
}

group = 'eth.likespro'
version = '1.0.0'

sourceCompatibility = 16
targetCompatibility = 16

repositories {
    mavenCentral()
}

dependencies {
    implementation 'commons-codec:commons-codec:1.13'
    implementation "org.minidns:minidns-hla:0.3.2"
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'org.json:json:20231013'
    implementation 'io.projectreactor:reactor-core:3.6.10'
    implementation 'org.mongodb:mongodb-driver-reactivestreams:5.4.0'
    implementation 'org.web3j:core:5.0.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

//    implementation 'org.conscrypt:conscrypt-openjdk-uber:2.5.2'
//    implementation "org.minidns:minidns-hla:0.3.2"
//    implementation 'io.projectreactor:reactor-core:3.6.10'
//    implementation 'org.mongodb:mongodb-driver-reactivestreams:5.1.4'
//    implementation 'org.web3j:core:5.0.0'
//    implementation 'org.gnu:gnu-crypto:2.0.1'
//    implementation 'org.apache.commons:commons-lang3:3.12.0'
//    implementation 'commons-codec:commons-codec:1.13'
//    implementation 'org.json:json:20231013'
//    implementation 'com.google.code.gson:gson:2.8.9'
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
//    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = '16'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '16'
}
jar {
    manifest {
        attributes 'Premain-Class': 'eth.likespro.commons.ObjectSizeFetcher'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    /*from { (configurations.runtimeClasspath).collect { println(it.name); if(it.name == "gson-2.8.9.jar" || it.name == "commons-codec-1.13.jar") zipTree(it) else null } } {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }*/
    enabled = true
}
def fatJar = tasks.register('fatJar', Jar) {
    manifest {
        attributes 'Premain-Class': 'eth.likespro.commons.ObjectSizeFetcher'
    }
    archiveBaseName = 'fat-commons'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { (configurations.runtimeClasspath).collect { println("Packing "+it.name+" into fatJar"); it.isDirectory() ? it : zipTree(it) } } {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
    exclude("META-INF/*.RSA", "META-INF/*.DSA", "META-INF/*.SF")
    with jar
    exclude("META-INF/*.RSA", "META-INF/*.DSA", "META-INF/*.SF")
}
tasks.build {
    dependsOn(fatJar)
}
tasks.register('printProjectName') {
    doLast {
        println rootProject.name
    }
}
tasks.register('printProjectVersion') {
    doLast {
        println version
    }
}
java{
    withJavadocJar()
    withSourcesJar()
}