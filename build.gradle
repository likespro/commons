plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.9.0'
    id 'maven-publish'
}

group = 'eth.likespro'
version = '1.3.1'

sourceCompatibility = 17
targetCompatibility = 17

repositories {
    mavenCentral()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'commons'
            groupId = group
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/" + System.getenv("REPO"))

            credentials {
                username = System.getenv("USERNAME")
                password = System.getenv("TOKEN")
            }
        }
//        if(System.getenv("SECOND_PUBLISH_REPO") != null) {
//            maven {
//                name = "GitHubPackagesSecondPublish"
//                url = uri("https://maven.pkg.github.com/" + System.getenv("SECOND_PUBLISH_REPO"))
//
//                credentials {
//                    username = System.getenv("SECOND_PUBLISH_USERNAME")
//                    password = System.getenv("SECOND_PUBLISH_TOKEN")
//                }
//            }
//        }
    }
}

dependencies {
    implementation 'commons-codec:commons-codec:1.13'
    implementation "org.minidns:minidns-hla:0.3.2"
    implementation 'com.google.code.gson:gson:2.8.9'
    api 'org.json:json:20231013'
    implementation 'io.projectreactor:reactor-core:3.6.10'
    implementation 'org.mongodb:mongodb-driver-reactivestreams:5.4.0'
    implementation 'org.web3j:core:5.0.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = '17'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '17'
}
jar {
    manifest {
        attributes 'Premain-Class': 'eth.likespro.commons.ObjectSizeFetcher'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    enabled = true
}
def fatJar = tasks.register('fatJar', Jar) {
    manifest {
        attributes 'Premain-Class': 'eth.likespro.commons.ObjectSizeFetcher'
    }
    archiveBaseName = 'fat-commons'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { (configurations.runtimeClasspath).collect { println("Packing "+it.name+" into fatJar"); it.isDirectory() ? it : zipTree(it) } } {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
    exclude("META-INF/*.RSA", "META-INF/*.DSA", "META-INF/*.SF")
    with jar
    exclude("META-INF/*.RSA", "META-INF/*.DSA", "META-INF/*.SF")
}
tasks.build {
    dependsOn(fatJar)
}
tasks.register('printProjectName') {
    doLast {
        println rootProject.name
    }
}
tasks.register('printProjectVersion') {
    doLast {
        println version
    }
}
java{
    withJavadocJar()
    withSourcesJar()
}